generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Setting {
  id               String   @id @default(cuid())
  defaultBrand     String   @default("SANGDO")
  defaultForm      String   @default("ECONOMIC")
  defaultLocation  String   @default("INDOOR")
  defaultMount     String   @default("FLUSH")
  rules            Json
  knowledgeVersion Json
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Estimate {
  id           String    @id @default(cuid())
  brand        String
  form         String
  installation Json
  device       Json
  main         Json
  branches     Json
  accessories  Json
  enclosure    Json?
  evidenceId   String?   @unique
  status       String    @default("draft")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  abstains     Abstain[]
  evidence     Evidence?
}

model Evidence {
  id               String   @id @default(cuid())
  estimateId       String   @unique
  rulesDoc         String
  tables           Json
  brandPolicy      String
  snapshot         Json
  snapshotHash     String
  rulesVersion     String
  knowledgeVersion String
  usedRows         Json
  tableHashes      Json
  signature        String
  version          Json
  createdAt        DateTime @default(now())
  estimate         Estimate @relation(fields: [estimateId], references: [id], onDelete: Cascade)
}

model Abstain {
  id          String    @id @default(cuid())
  estimateId  String?
  requestPath String
  missingData String
  suggestion  String
  status      String    @default("pending")
  resolution  Json?
  createdAt   DateTime  @default(now())
  resolvedAt  DateTime?
  estimate    Estimate? @relation(fields: [estimateId], references: [id])
}

model CalendarEvent {
  id        String   @id @default(cuid())
  type      String
  title     String
  start     DateTime
  end       DateTime
  location  String?
  memo      String?
  owner     String?
  links     Json?
  conflicts Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailGroup {
  id        String        @id @default(cuid())
  name      String        @unique
  rules     Json
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  threads   EmailThread[]
}

model EmailThread {
  id          String      @id @default(cuid())
  to          String?
  cc          String?
  subject     String?
  body        String?     @default("")
  status      String      @default("DRAFT")
  attachments Json?
  groupId     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  group       EmailGroup? @relation(fields: [groupId], references: [id])
}

model Drawing {
  id        String    @id @default(cuid())
  name      String
  rev       String
  date      DateTime?
  author    String?
  tags      Json?
  memo      String?
  history   Json?
  links     Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([name, rev])
}

model AuditLog {
  id        String   @id @default(cuid())
  actor     String
  action    String
  payload   Json
  result    String?
  createdAt DateTime @default(now())
}

model IdempotencyKey {
  key        String    @id
  scope      String
  actor      String?
  reqHash    String
  response   Json
  status     String
  createdAt  DateTime  @default(now())
  replayedAt DateTime?

  @@index([createdAt])
}

// ============================================
// 지식 테이블 (새 버전 관리 시스템)
// ============================================
model KnowledgeVersion {
  id        Int      @id @default(autoincrement())
  label     String   // 예: "v2025-09-24-01"
  createdAt DateTime @default(now())
  active    Boolean  @default(false)
  // 운영에 단 하나만 active=true

  tables    KnowledgeTable[]

  @@index([active])
}

model KnowledgeTable {
  id          String   @id @default(cuid())
  versionId   Int
  brand       String   // SANGDO | LS
  series      String?  // SANGDO는 SBS/SES/SEE 등, LS는 Metasol 등
  model       String?  // 예: SBS-603
  af          Int?     // LS 계열에서 유효할 수도 있음
  poles       String   // "1P"|"2P"|"3P"|"4P"
  widthMM     Int
  heightMM    Int
  depthMM     Int
  meta        Json?
  rowHash     String   // 행 단위 검증용 sha256

  // FK
  version     KnowledgeVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)

  @@index([versionId, brand, series, model, poles])
  @@index([versionId, brand, af, poles])
}

model KnowledgeStaging {
  id        String   @id @default(cuid())
  uploadedAt DateTime @default(now())
  actor     String?
  format    String   // 'CSV' | 'JSON'
  payload   Bytes    // 원본 보관(감사)
  parsed    Json     // 정규화된 라인 배열
  summary   Json     // 통계, 검증 결과 요약
  tableHashes Json   // import 시 계산한 해시들
  status    String   // 'UPLOADED' | 'VALIDATED' | 'READY' | 'REJECTED' | 'ACTIVATED'
}

model KnowledgeAudit {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  actor     String?
  action    String   // IMPORT | VALIDATE | ACTIVATE | ROLLBACK
  detail    Json
}

// ============================================
// 레거시 지식 테이블 (기존 데이터 보존)
// ============================================
model LegacyKnowledgeTable {
  id        String   @id @default(cuid())
  name      String   @unique
  version   String
  data      Json
  checksum  String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
}
