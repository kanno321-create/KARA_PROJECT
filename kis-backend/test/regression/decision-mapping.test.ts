import { describe, it, expect, beforeAll, afterAll } from 'vitest';
import { FastifyInstance } from 'fastify';
import { buildApp } from '../../src/app.js';

/**
 * ÌöåÍ∑Ä ÌÖåÏä§Ìä∏: Í≤∞Ï†ï Îß§Ìïë 5Ï¢Ö ÌïµÏã¨ ÏºÄÏù¥Ïä§
 * CIÏóêÏÑú Ï†ÑÏàò PASS ÌïÑÏàò (Î≥ëÌï© Ï∞®Îã® Ï°∞Í±¥)
 */

describe('üéØ Decision Mapping Regression Tests', () => {
  let app: FastifyInstance;

  beforeAll(async () => {
    app = buildApp({
      logger: false,
      database: { url: ':memory:' }
    });
    await app.ready();
  });

  afterAll(async () => {
    await app.close();
  });

  /**
   * A) ÏßÄÏãù ÏóÜÏùå ‚Üí 200/ABSTAIN("no active knowledge version")
   */
  it('üîç A) Knowledge Absent ‚Üí 200 + ABSTAIN', async () => {
    const payload = {
      brand: 'SANGDO',
      form: 'ECONOMIC',
      installation: { location: 'INDOOR', mount: 'FLUSH' },
      device: { type: 'MCCB' },
      main: { enabled: true, af: 100, at: 100, poles: '3P' },
      branches: [{ af: 50, at: 50, poles: '2P', qty: 2 }],
      accessories: { enabled: false }
    };

    const response = await app.inject({
      method: 'POST',
      url: '/v1/estimate/create',
      headers: {
        'Content-Type': 'application/json',
        'Idempotency-Key': 'regression-test-a'
      },
      payload
    });

    expect(response.statusCode).toBe(200);

    const body = response.json();
    expect(body.decision).toBe('ABSTAIN');
    expect(body.reasons).toContain('no active knowledge version');
    expect(body.hints).toBeDefined();
    expect(body.metadata).toHaveProperty('stage', 'knowledge');
    expect(body.metadata).toHaveProperty('status', 'absent');
  });

  /**
   * B) Ïú†Ìö® SKU ‚Üí 200/OK (ÏßÄÏãù ÌôúÏÑ±Ìôî ÌõÑ)
   * Ïã§Ï†úÎ°úÎäî ÏßÄÏãùÏù¥ ÏóÜÏñ¥ÏÑú ABSTAINÏù¥ ÎÇòÏò§ÏßÄÎßå,
   * Ìñ•ÌõÑ ÏßÄÏãù ÌôúÏÑ±Ìôî Ïãú OK ÏùëÎãµ Íµ¨Ï°∞ ÌÖåÏä§Ìä∏
   */
  it('üîç B) Valid SKU ‚Üí 200 + OK (Future: with knowledge)', async () => {
    const payload = {
      brand: 'SANGDO',
      form: 'ECONOMIC',
      installation: { location: 'INDOOR', mount: 'FLUSH' },
      device: { type: 'MCCB' },
      main: { enabled: true, af: 100, at: 100, poles: '3P', model: 'S-100AF' },
      branches: [{ af: 50, at: 50, poles: '2P', qty: 2, model: 'S-50AF' }],
      accessories: { enabled: false }
    };

    const response = await app.inject({
      method: 'POST',
      url: '/v1/estimate/create',
      headers: {
        'Content-Type': 'application/json',
        'Idempotency-Key': 'regression-test-b'
      },
      payload
    });

    expect(response.statusCode).toBe(200);

    const body = response.json();
    // ÌòÑÏû¨Îäî ÏßÄÏãù Î∂ÄÏû¨Î°ú ABSTAINÏù¥ÏßÄÎßå, Íµ¨Ï°∞Îäî Í≤ÄÏ¶ù
    expect(body).toHaveProperty('decision');
    expect(['OK', 'ABSTAIN']).toContain(body.decision);

    if (body.decision === 'OK') {
      expect(body.estimate).toBeDefined();
      expect(body.estimate.id).toBeDefined();
      expect(body.estimate.status).toBe('validated');
    }
  });

  /**
   * C) ÌïÑÏàò ÎàÑÎùΩ(brand) ‚Üí 422(+path/hint)
   */
  it('üîç C) Missing Required Field ‚Üí 422 + path/hint', async () => {
    const payload = {
      // brand ÎàÑÎùΩ
      form: 'ECONOMIC',
      installation: { location: 'INDOOR', mount: 'FLUSH' },
      device: { type: 'MCCB' },
      main: { enabled: true, af: 100, at: 100, poles: '3P' },
      branches: [{ af: 50, at: 50, poles: '2P', qty: 2 }],
      accessories: { enabled: false }
    };

    const response = await app.inject({
      method: 'POST',
      url: '/v1/estimate/create',
      headers: {
        'Content-Type': 'application/json',
        'Idempotency-Key': 'regression-test-c'
      },
      payload
    });

    expect(response.statusCode).toBe(422);

    const body = response.json();
    expect(body.code).toBeDefined();
    expect(body.message).toBeDefined();
    expect(body.path).toContain('brand');
    expect(body.hint).toBeDefined();
  });

  /**
   * D) Ìè¨Îß∑ Ïò§Î•ò(JSON) ‚Üí 415/422
   */
  it('üîç D) Invalid JSON Format ‚Üí 415/422', async () => {
    const response = await app.inject({
      method: 'POST',
      url: '/v1/estimate/create',
      headers: {
        'Content-Type': 'application/json',
        'Idempotency-Key': 'regression-test-d'
      },
      payload: '{ invalid json }'
    });

    expect([415, 422]).toContain(response.statusCode);

    if (response.statusCode === 422) {
      const body = response.json();
      expect(body.code).toBeDefined();
      expect(body.message).toBeDefined();
    }
  });

  /**
   * E) Ïä§ÌÇ§Îßà ÏúÑÎ∞ò (ÏûòÎ™ªÎêú enum) ‚Üí 422
   */
  it('üîç E) Schema Violation ‚Üí 422', async () => {
    const payload = {
      brand: 'INVALID_BRAND', // ÏûòÎ™ªÎêú enum
      form: 'ECONOMIC',
      installation: { location: 'INDOOR', mount: 'FLUSH' },
      device: { type: 'MCCB' },
      main: { enabled: true, af: 100, at: 100, poles: '3P' },
      branches: [{ af: 50, at: 50, poles: '2P', qty: 2 }],
      accessories: { enabled: false }
    };

    const response = await app.inject({
      method: 'POST',
      url: '/v1/estimate/create',
      headers: {
        'Content-Type': 'application/json',
        'Idempotency-Key': 'regression-test-e'
      },
      payload
    });

    expect(response.statusCode).toBe(422);

    const body = response.json();
    expect(body.code).toBeDefined();
    expect(body.message).toBeDefined();
    expect(body.path).toBeDefined();
  });

  /**
   * ÏÑ±Îä• Í≤ΩÍ≥ÑÍ∞í ÌÖåÏä§Ìä∏: p95 ‚â§ 100ms (dev ÌôòÍ≤Ω)
   */
  it('üîç Performance Boundary: p95 ‚â§ 100ms', async () => {
    const payload = {
      brand: 'SANGDO',
      form: 'ECONOMIC',
      installation: { location: 'INDOOR', mount: 'FLUSH' },
      device: { type: 'MCCB' },
      main: { enabled: true, af: 100, at: 100, poles: '3P' },
      branches: [{ af: 50, at: 50, poles: '2P', qty: 2 }],
      accessories: { enabled: false }
    };

    const latencies: number[] = [];

    // 20Ìöå Ï∏°Ï†ï
    for (let i = 0; i < 20; i++) {
      const start = Date.now();

      await app.inject({
        method: 'POST',
        url: '/v1/estimate/create',
        headers: {
          'Content-Type': 'application/json',
          'Idempotency-Key': `perf-test-${i}`
        },
        payload
      });

      latencies.push(Date.now() - start);
    }

    // p95 Í≥ÑÏÇ∞
    latencies.sort((a, b) => a - b);
    const p95Index = Math.floor(latencies.length * 0.95);
    const p95 = latencies[p95Index];

    console.log(`üìä Performance: p95=${p95}ms, min=${latencies[0]}ms, max=${latencies[latencies.length-1]}ms`);

    // Dev ÌôòÍ≤Ω Î™©Ìëú: p95 ‚â§ 100ms
    expect(p95).toBeLessThanOrEqual(100);
  });

  /**
   * Î©±Îì±ÏÑ± ÏùºÍ¥ÄÏÑ± ÌÖåÏä§Ìä∏: ÎèôÏùº ÏûÖÎ†• ‚Üí ÎèôÏùº Ï∂úÎ†•
   */
  it('üîç Idempotency Consistency', async () => {
    const payload = {
      brand: 'SANGDO',
      form: 'ECONOMIC',
      installation: { location: 'INDOOR', mount: 'FLUSH' },
      device: { type: 'MCCB' },
      main: { enabled: true, af: 100, at: 100, poles: '3P' },
      branches: [{ af: 50, at: 50, poles: '2P', qty: 2 }],
      accessories: { enabled: false }
    };

    const idempotencyKey = 'idempotency-consistency-test';

    // Ï≤´ Î≤àÏß∏ Ìò∏Ï∂ú
    const response1 = await app.inject({
      method: 'POST',
      url: '/v1/estimate/create',
      headers: {
        'Content-Type': 'application/json',
        'Idempotency-Key': idempotencyKey
      },
      payload
    });

    // Îëê Î≤àÏß∏ Ìò∏Ï∂ú (ÎèôÏùºÌïú Î©±Îì±ÏÑ± ÌÇ§)
    const response2 = await app.inject({
      method: 'POST',
      url: '/v1/estimate/create',
      headers: {
        'Content-Type': 'application/json',
        'Idempotency-Key': idempotencyKey
      },
      payload
    });

    expect(response1.statusCode).toBe(response2.statusCode);
    expect(response1.json()).toEqual(response2.json());
  });
});